#######################################################################################
; This is a sample .ini filed to test with sas.config, an config
; file reader.  It should be noted that this may not be the
; best solution, but it is a solution.
;
; Formatting
; ==============
;  1. comments are started with '#' or ';' and last til the end of a line.  To get 
;     either character, escape out of it with a '\'
;
;  2. sections appear as "[section name]", and these names are keys
;
;  3. "%(foo)s" will replaced with the value from foo.  The value being substituted in 
;     can only be in the global section or the current section. Oddly enough, this is 
;     for security. Unknown values will be replaced with empty strings unless specified 
;      differently in the options
; 
;  4. a statement can be  "key: value", "key = value" or any style of spacing like 
;     that. The variable names are keys.
;
;  5. To have a line wrap, simply have a continuous block of text.  two return 
;     characters, creating a section, or starting a second statement will end the 
;     current block of text.  All whitespace will be stripped from both sides and an
;     option is included for striping out newline characters.
;
;  6. statements also are allowed ("key") and are primarily used as flags
;
;  7. Keys will be converted to lowercase and made safe for keyword formating 
;     (ie spaces removed.)
; 
;  8. Inline documents similar to bash syntax are allowed for very very long
;     blocks of text
;
;  9. Sections actually can nest!  And string replacement starts at the bottom and works
;     it's way if (in case you were concerned.  To create a nested section, simply make 
;     sure the name is "[section1 : subsection]".  Notice, that's at least a space on
;     either side of that colon!
;
; 10. Lastly, there is support for filters as part of the schema, on top of every other
;     piece of the schema definition, custom filters can be added on easily enough.
;     Any time a value is being interpolated, simply add a |, the function name, and
;     whatever other parameters you'd like.  They also can be used when fetching/setting
;     information and in the schema!
;
; Good luck!
#######################################################################################


;;;;;;;;;;;;;;;;;;;;
;; Global section ;;
;;;;;;;;;;;;;;;;;;;;

app_name: sas.config
version:  [0,1,1]
author:   Alec Goebel <agoebel@swordandspade.com>
org:      Sword and Spade Studios
created:	  3:19 AM 12/23/2010  # ever notice how all times
last_modified:	  3:19 AM 12/23/2010  # start to look alike?


[web]
title: %(app_name) v%(version|join .)
tags:  clojure, creative programming
desc:  As you can see here, there is no 
       reason to append not to simply create
       blocks of text. It's easy as pie!

[email]
subject: Sample long block
body: <<BODY

This format also works perfectly well. As you can see here, there is no 
reason to append not to simply create blocks of text.  However, as you'll
notice bellow a change in indentation is a bigger problem than anything
else!  You can always go in and back out, but you simply cannot start 
inward.  

Well, that's not entirely true. The two options for giant text blocks are 
long and looooooong.  The description above is a good example of long.  
But, because we started this block with that "<<", it will just
keep going and going until That key is replicated as it's own line!  Neat huh!

That's it from me,
	Some Guy
<<BODY
 
[database]
type  = mysql
server = 127.0.0.1
port   = 1143

[database : mysql]
autoreconnect
multithreaded
attempts = 3
